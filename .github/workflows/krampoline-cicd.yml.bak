name: tmeroom-spring-server CI / CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  setting_for_build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out env files
        uses: actions/checkout@v3
        with:
          repository: TeamyRoom/TMeRoom-ServerEnv
          ref: master
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Upload env files
        uses: actions/upload-artifact@master
        with:
          name: env-file
          # 가져올 프로젝트의 설정 파일을 지정
          path: ./spring/application-prod.yml

  build:
    runs-on: ubuntu-latest
    needs: setting_for_build
    steps:
      # github action의 가상환경에 내 프로젝트를 체크아웃하기
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download env files
        uses: actions/download-artifact@master
        with:
          name: env-file
          path: src/main/resources

      # github action의 가상환경에 빌드를 위해 jdk 17 설치하기
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle로 빌드할 의존성 준비하기
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # gradle로 빌드하여 jar 파일 생성하기
      - name: Execute Gradle build
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

      # job은 별도의 가상환경에서 실행되므로
      # job 사이에 파일 공유를 위해 빌드 결과물인 jar 파일을 upload함
      - name: Upload jar file
        uses: actions/upload-artifact@master
        with:
          name: build-result
          path: ./build/libs

      - name: Upload Dockerfile
        uses: actions/upload-artifact@master
        with:
          name: Dockerfile
          path: ./Dockerfile

  # 참고 사이트
  # https://docs.github.com/ko/actions/publishing-packages/publishing-docker-images
  push_to_private_repository:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out private repository
        uses: actions/checkout@v3
        with:
          repository: TeamyRoom/TMeRoom-Krampoline-Spring
          token: ${{ secrets.ACTION_TOKEN }}

      # 이전 job에서 업로드 한 jar 파일을 다운로드하여 docker image 생성 시 사용
      - name: Download jar file
        uses: actions/download-artifact@master
        with:
          name: build-result
          path: ./build/libs

      - name: Download Dockerfile
        uses: actions/download-artifact@master
        with:
          name: Dockerfile
          path: ./

      - name: Commit jar file
        uses: EndBug/add-and-commit@v9
        with:
          author_name: ${{ secrets.GIT_USERNAME }}
          author_email: ${{ secrets.GIT_EMAIL }}
          message: "📦	: 컴파일된 파일 업로드: #${{ github.run_number }}"
          cwd: './'
          push: true

      # 업로드한 artifacts를 삭제하기
      - name: Remove Github Actions Artifacts
        uses: GeekyEggo/delete-artifact@v2.0.0
        if: ${{ always() }}
        with:
          # The name of the artifact to delete; multiple names can be supplied on new lines.
          name: |
            env-file
            build-result
            Dockerfile
          
